import unittest
import deepsmiles as ds
from chemgrams import DeepSMILESTokenizer, DeepSMILESToken
import os

THIS_DIR = os.path.dirname(os.path.abspath(__file__))


class TestDeepSMILESTokenizer(unittest.TestCase):

    def test_can_tokenize_deepsmiles(self):
        with open(os.path.join(THIS_DIR, 'resources', 'smiles.txt'), 'r') as content_file:
            lines = content_file.readlines()
        all_smiles = [line.strip() for line in lines]
        converter = ds.Converter(rings=True, branches=True)
        for smiles in all_smiles:
            deepsmiles = converter.encode(smiles)
            DeepSMILESTokenizer(deepsmiles)

    def test_molecule1(self):
        tokenizer = DeepSMILESTokenizer("[O-]C=O)COcncccc6cns5")

        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken("formal_atom", "[O-]", 0))
        self.assertEqual(tokens[1], DeepSMILESToken("plain_atom", "C", 4))
        self.assertEqual(tokens[2], DeepSMILESToken("bond", "=", 5))
        self.assertEqual(tokens[3], DeepSMILESToken("plain_atom", "O", 6))
        self.assertEqual(tokens[4], DeepSMILESToken("grouping", ")", 7))
        self.assertEqual(tokens[5], DeepSMILESToken("plain_atom", "C", 8))
        self.assertEqual(tokens[6], DeepSMILESToken("plain_atom", "O", 9))
        self.assertEqual(tokens[7], DeepSMILESToken("plain_atom", "c", 10))
        self.assertEqual(tokens[8], DeepSMILESToken("plain_atom", "n", 11))
        self.assertEqual(tokens[9], DeepSMILESToken("plain_atom", "c", 12))
        self.assertEqual(tokens[10], DeepSMILESToken("plain_atom", "c", 13))
        self.assertEqual(tokens[11], DeepSMILESToken("plain_atom", "c", 14))
        self.assertEqual(tokens[12], DeepSMILESToken("plain_atom", "c", 15))
        self.assertEqual(tokens[13], DeepSMILESToken("ring_size", "6", 16))
        self.assertEqual(tokens[14], DeepSMILESToken("plain_atom", "c", 17))
        self.assertEqual(tokens[15], DeepSMILESToken("plain_atom", "n", 18))
        self.assertEqual(tokens[16], DeepSMILESToken("plain_atom", "s", 19))
        self.assertEqual(tokens[17], DeepSMILESToken("ring_size", "5", 20))

        self.assertEqual(tokenizer.get_raw_length(), 21)
        self.assertEqual(tokenizer.get_tokenized_length(), 18)

        t = tokenizer.token_at(3)
        self.assertEqual(t, DeepSMILESToken("plain_atom", "O", 6))

    def test_molecule2(self):
        tokenizer = DeepSMILESTokenizer("COccccN)ccnc6cc%10OC")

        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken("plain_atom", "C", 0))
        self.assertEqual(tokens[1], DeepSMILESToken("plain_atom", "O", 1))
        self.assertEqual(tokens[2], DeepSMILESToken("plain_atom", "c", 2))
        self.assertEqual(tokens[3], DeepSMILESToken("plain_atom", "c", 3))
        self.assertEqual(tokens[4], DeepSMILESToken("plain_atom", "c", 4))
        self.assertEqual(tokens[5], DeepSMILESToken("plain_atom", "c", 5))
        self.assertEqual(tokens[6], DeepSMILESToken("plain_atom", "N", 6))
        self.assertEqual(tokens[7], DeepSMILESToken("grouping", ")", 7))
        self.assertEqual(tokens[8], DeepSMILESToken("plain_atom", "c", 8))
        self.assertEqual(tokens[9], DeepSMILESToken("plain_atom", "c", 9))
        self.assertEqual(tokens[10], DeepSMILESToken("plain_atom", "n", 10))
        self.assertEqual(tokens[11], DeepSMILESToken("plain_atom", "c", 11))
        self.assertEqual(tokens[12], DeepSMILESToken("ring_size", "6", 12))
        self.assertEqual(tokens[13], DeepSMILESToken("plain_atom", "c", 13))
        self.assertEqual(tokens[14], DeepSMILESToken("plain_atom", "c", 14))
        self.assertEqual(tokens[15], DeepSMILESToken("ring_size", "%10", 15))
        self.assertEqual(tokens[16], DeepSMILESToken("plain_atom", "O", 18))
        self.assertEqual(tokens[17], DeepSMILESToken("plain_atom", "C", 19))

        self.assertEqual(tokenizer.get_raw_length(), 20)
        self.assertEqual(tokenizer.get_tokenized_length(), 18)

        t = tokenizer.token_at(9)
        self.assertEqual(t, DeepSMILESToken("plain_atom", "c", 9))

    def test_ring_size(self):
        tokenizer = DeepSMILESTokenizer("CC%(113)OC")
        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken("plain_atom", "C", 0))
        self.assertEqual(tokens[1], DeepSMILESToken("plain_atom", "C", 1))
        self.assertEqual(tokens[2], DeepSMILESToken("ring_size", "%(113)", 2))
        self.assertEqual(tokens[3], DeepSMILESToken("plain_atom", "O", 8))
        self.assertEqual(tokens[4], DeepSMILESToken("plain_atom", "C", 9))

    def test_chlorine(self):
        tokenizer = DeepSMILESTokenizer("ClCC%(113)OC")
        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken("plain_atom", "Cl", 0))
        self.assertEqual(tokens[1], DeepSMILESToken("plain_atom", "C", 2))
        self.assertEqual(tokens[2], DeepSMILESToken("plain_atom", "C", 3))
        self.assertEqual(tokens[3], DeepSMILESToken("ring_size", "%(113)", 4))
        self.assertEqual(tokens[4], DeepSMILESToken("plain_atom", "O", 10))
        self.assertEqual(tokens[5], DeepSMILESToken("plain_atom", "C", 11))

    def test_bromine(self):
        tokenizer = DeepSMILESTokenizer("BrCC%(113)OC")
        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken("plain_atom", "Br", 0))
        self.assertEqual(tokens[1], DeepSMILESToken("plain_atom", "C", 2))
        self.assertEqual(tokens[2], DeepSMILESToken("plain_atom", "C", 3))
        self.assertEqual(tokens[3], DeepSMILESToken("ring_size", "%(113)", 4))
        self.assertEqual(tokens[4], DeepSMILESToken("plain_atom", "O", 10))
        self.assertEqual(tokens[5], DeepSMILESToken("plain_atom", "C", 11))

    def test_bonds(self):
        tokenizer = DeepSMILESTokenizer("CC/C=C/C-CC#N")
        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken("plain_atom", "C", 0))
        self.assertEqual(tokens[1], DeepSMILESToken("plain_atom", "C", 1))
        self.assertEqual(tokens[2], DeepSMILESToken("bond", "/", 2))
        self.assertEqual(tokens[3], DeepSMILESToken("plain_atom", "C", 3))
        self.assertEqual(tokens[4], DeepSMILESToken("bond", "=", 4))
        self.assertEqual(tokens[5], DeepSMILESToken("plain_atom", "C", 5))
        self.assertEqual(tokens[6], DeepSMILESToken("bond", "/", 6))
        self.assertEqual(tokens[7], DeepSMILESToken("plain_atom", "C", 7))
        self.assertEqual(tokens[8], DeepSMILESToken("bond", "-", 8))
        self.assertEqual(tokens[9], DeepSMILESToken("plain_atom", "C", 9))
        self.assertEqual(tokens[10], DeepSMILESToken("plain_atom", "C", 10))
        self.assertEqual(tokens[11], DeepSMILESToken("bond", "#", 11))
        self.assertEqual(tokens[12], DeepSMILESToken("plain_atom", "N", 12))

    def test_formal_phosphorus(self):
        tokenizer = DeepSMILESTokenizer("O=C[CH]N[P]=O)OS=O)=O)N)))Occcccc6))O")
        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken(type='plain_atom', value='O', index=0))
        self.assertEqual(tokens[1], DeepSMILESToken(type='bond', value='=', index=1))
        self.assertEqual(tokens[2], DeepSMILESToken(type='plain_atom', value='C', index=2))
        self.assertEqual(tokens[3], DeepSMILESToken(type='formal_atom', value='[CH]', index=3))
        self.assertEqual(tokens[4], DeepSMILESToken(type='plain_atom', value='N', index=7))
        self.assertEqual(tokens[5], DeepSMILESToken(type='formal_atom', value='[P]', index=8))
        self.assertEqual(tokens[6], DeepSMILESToken(type='bond', value='=', index=11))
        self.assertEqual(tokens[7], DeepSMILESToken(type='plain_atom', value='O', index=12))
        self.assertEqual(tokens[8], DeepSMILESToken(type='grouping', value=')', index=13))
        self.assertEqual(tokens[9], DeepSMILESToken(type='plain_atom', value='O', index=14))
        self.assertEqual(tokens[10], DeepSMILESToken(type='plain_atom', value='S', index=15))
        self.assertEqual(tokens[11], DeepSMILESToken(type='bond', value='=', index=16))
        self.assertEqual(tokens[12], DeepSMILESToken(type='plain_atom', value='O', index=17))
        self.assertEqual(tokens[13], DeepSMILESToken(type='grouping', value=')', index=18))
        self.assertEqual(tokens[14], DeepSMILESToken(type='bond', value='=', index=19))
        self.assertEqual(tokens[15], DeepSMILESToken(type='plain_atom', value='O', index=20))
        self.assertEqual(tokens[16], DeepSMILESToken(type='grouping', value=')', index=21))
        self.assertEqual(tokens[17], DeepSMILESToken(type='plain_atom', value='N', index=22))
        self.assertEqual(tokens[18], DeepSMILESToken(type='grouping', value=')', index=23))
        self.assertEqual(tokens[19], DeepSMILESToken(type='grouping', value=')', index=24))
        self.assertEqual(tokens[20], DeepSMILESToken(type='grouping', value=')', index=25))
        self.assertEqual(tokens[21], DeepSMILESToken(type='plain_atom', value='O', index=26))
        self.assertEqual(tokens[22], DeepSMILESToken(type='plain_atom', value='c', index=27))
        self.assertEqual(tokens[23], DeepSMILESToken(type='plain_atom', value='c', index=28))
        self.assertEqual(tokens[24], DeepSMILESToken(type='plain_atom', value='c', index=29))
        self.assertEqual(tokens[25], DeepSMILESToken(type='plain_atom', value='c', index=30))
        self.assertEqual(tokens[26], DeepSMILESToken(type='plain_atom', value='c', index=31))
        self.assertEqual(tokens[27], DeepSMILESToken(type='plain_atom', value='c', index=32))
        self.assertEqual(tokens[28], DeepSMILESToken(type='ring_size', value='6', index=33))
        self.assertEqual(tokens[29], DeepSMILESToken(type='grouping', value=')', index=34))
        self.assertEqual(tokens[30], DeepSMILESToken(type='grouping', value=')', index=35))
        self.assertEqual(tokens[31], DeepSMILESToken(type='plain_atom', value='O', index=36))

    def test_chiral_phosphorus(self):
        tokenizer = DeepSMILESTokenizer("O=C[CH]N[P@@]=O)OS=O)=O)N)))Occcccc6))O")
        tokens = tokenizer.get_tokens()
        self.assertEqual(tokens[0], DeepSMILESToken(type='plain_atom', value='O', index=0))
        self.assertEqual(tokens[1], DeepSMILESToken(type='bond', value='=', index=1))
        self.assertEqual(tokens[2], DeepSMILESToken(type='plain_atom', value='C', index=2))
        self.assertEqual(tokens[3], DeepSMILESToken(type='formal_atom', value='[CH]', index=3))
        self.assertEqual(tokens[4], DeepSMILESToken(type='plain_atom', value='N', index=7))
        self.assertEqual(tokens[5], DeepSMILESToken(type='formal_atom', value='[P@@]', index=8))
        self.assertEqual(tokens[6], DeepSMILESToken(type='bond', value='=', index=13))
        self.assertEqual(tokens[7], DeepSMILESToken(type='plain_atom', value='O', index=14))
        self.assertEqual(tokens[8], DeepSMILESToken(type='grouping', value=')', index=15))
        self.assertEqual(tokens[9], DeepSMILESToken(type='plain_atom', value='O', index=16))
        self.assertEqual(tokens[10], DeepSMILESToken(type='plain_atom', value='S', index=17))
        self.assertEqual(tokens[11], DeepSMILESToken(type='bond', value='=', index=18))
        self.assertEqual(tokens[12], DeepSMILESToken(type='plain_atom', value='O', index=19))
        self.assertEqual(tokens[13], DeepSMILESToken(type='grouping', value=')', index=20))
        self.assertEqual(tokens[14], DeepSMILESToken(type='bond', value='=', index=21))
        self.assertEqual(tokens[15], DeepSMILESToken(type='plain_atom', value='O', index=22))
        self.assertEqual(tokens[16], DeepSMILESToken(type='grouping', value=')', index=23))
        self.assertEqual(tokens[17], DeepSMILESToken(type='plain_atom', value='N', index=24))
        self.assertEqual(tokens[18], DeepSMILESToken(type='grouping', value=')', index=25))
        self.assertEqual(tokens[19], DeepSMILESToken(type='grouping', value=')', index=26))
        self.assertEqual(tokens[20], DeepSMILESToken(type='grouping', value=')', index=27))
        self.assertEqual(tokens[21], DeepSMILESToken(type='plain_atom', value='O', index=28))
        self.assertEqual(tokens[22], DeepSMILESToken(type='plain_atom', value='c', index=29))
        self.assertEqual(tokens[23], DeepSMILESToken(type='plain_atom', value='c', index=30))
        self.assertEqual(tokens[24], DeepSMILESToken(type='plain_atom', value='c', index=31))
        self.assertEqual(tokens[25], DeepSMILESToken(type='plain_atom', value='c', index=32))
        self.assertEqual(tokens[26], DeepSMILESToken(type='plain_atom', value='c', index=33))
        self.assertEqual(tokens[27], DeepSMILESToken(type='plain_atom', value='c', index=34))
        self.assertEqual(tokens[28], DeepSMILESToken(type='ring_size', value='6', index=35))
        self.assertEqual(tokens[29], DeepSMILESToken(type='grouping', value=')', index=36))
        self.assertEqual(tokens[30], DeepSMILESToken(type='grouping', value=')', index=37))
        self.assertEqual(tokens[31], DeepSMILESToken(type='plain_atom', value='O', index=38))
